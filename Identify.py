# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PysDOS
                                 A QGIS plugin
 AAAAAAAAAAAAAAAAA
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-03-30
        git sha              : $Format:%H$
        copyright            : (C) 2020 by RG_NS
        email                : none
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import random
import socket
import traceback
import time
from threading import Thread

import sip

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt,pyqtSignal,QPoint
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction,  QMenu, QMainWindow
from qgis.core import *
from qgis.gui import *

from .resources import *
import os.path

class PysSelector(QgsMapTool):
    select = pyqtSignal()

    def __init__(self,iface,cvet):
        canvas = iface.mapCanvas()
        QgsMapTool.__init__(self,canvas)
        #
        self.canvas = canvas
        self.iface = iface
        self.status = 0
        #
        self.click_pos = None
        #
        self.rbSelect = QgsRubberBand(self.canvas, QgsWkbTypes.PolygonGeometry)
        self.rbSelect.setColor(cvet)
        self.rbSelect.setSecondaryStrokeColor(Qt.red)
        #
        self.rbSSize = 1
        return None

    def canvasReleaseEvent(self,e):
        self.rbSelect.reset(QgsWkbTypes.PolygonGeometry)
        cp = self.toMapCoordinates(
            QPoint(e.pos().x() - self.rbSSize, e.pos().y() - self.rbSSize))
        self.rbSelect.addPoint(cp)
        cp = self.toMapCoordinates(
            QPoint(e.pos().x() + self.rbSSize, e.pos().y() - self.rbSSize))
        self.rbSelect.addPoint(cp)
        cp = self.toMapCoordinates(
            QPoint(e.pos().x() + self.rbSSize, e.pos().y() + self.rbSSize))
        self.rbSelect.addPoint(cp)
        cp = self.toMapCoordinates(
            QPoint(e.pos().x() - self.rbSSize, e.pos().y() + self.rbSSize))
        self.rbSelect.addPoint(cp)
        self.click_pos = e.globalPos()
        self.select.emit()
        return None

    def reset(self):
        self.rbSelect.reset(QgsWkbTypes.PolygonGeometry)

class PysConnector(QgsMapTool):
    signal = pyqtSignal()
    refresh = pyqtSignal()
    drop = pyqtSignal()

    def __init__(self,iface):
        canvas = iface.mapCanvas()
        QgsMapTool.__init__(self,canvas)
        #
        self.feature_id_list = None
        self.feature_layer = None

    def dropSelection(self):
        self.drop.emit()

    def refreshLayers(self):
        self.refresh.emit()

    def sendSome(self):
        self.signal.emit()

class PysThread(Thread):
    def __init__(self,iface,sender,layers,layers_prefix):
        print('Создан поток, который слушает')
        Thread.__init__(self)
        self.setDaemon(True)
        self.sender = sender
        self.important_layers = layers
        self.important_layers_prefix = layers_prefix
        #
        self.refreshing = False
        self.work = True
        #
        self.iface = iface
        self.canvas = iface.mapCanvas()

    def stopWork(self):
        self.work = False

    def run(self):
        sock = socket.socket()
        sock.settimeout(1)
        sock.bind(('',11001))
        sock.listen(1)
        conn = None
        #
        uuid_builder = ''
        uuid_list = []
        eol = False
        uuid_layer_prefix = None
        #
        while self.work:
            try:
                conn, _ = sock.accept()
            except:
                False
            if conn:
                while self.work:
                    data = self.trimSmth(str(conn.recv(1024)))
                    if data:
                        self.refreshing = True
                        self.sender.refreshLayers()
                        while self.refreshing:
                            True
                        while not eol:
                            for c in data:
                                if uuid_layer_prefix:
                                    if 'a'<=c<='z' or 'A'<=c<='Z' or c=='-' or '0'<=c<='9':
                                        uuid_builder = uuid_builder+c
                                    elif c==',':
                                        uuid_list.append(uuid_builder)
                                        uuid_builder=''
                                    elif c==']':
                                        eol=True
                                        uuid_list.append(uuid_builder)
                                        uuid_builder=''
                                else:
                                    uuid_layer_prefix = c
                            data = self.trimSmth(str(conn.recv(1024)))
                        #
                        self.selectPolygon(data,uuid_layer_prefix,uuid_list)
                        #
                        uuid_builder = ''
                        uuid_list = []
                        eol = False
                        uuid_layer_prefix = None
                        break
                conn.close()
                conn = None
    
    def selectPolygon(self,stringa,layer_prefix,uuid_list):
        layer_selected = None
        for i in range(len(self.important_layers)):
            if layer_prefix==self.important_layers_prefix[i]:
                layer_selected = self.important_layers[i]
        if layer_selected:
            features = layer_selected.getFeatures()
            #
            features_id_to_send = []
            for feature in features:
                if feature.attributes()[0] in uuid_list:
                    features_id_to_send.append(feature.id())
            if len(features_id_to_send)>0:
                self.sender.dropSelection()
                self.sender.feature_id_list = features_id_to_send
                self.sender.feature_layer = layer_selected
                self.sender.sendSome()

    def trimSmth(self,stringa):
        result = stringa[2:len(stringa)-1]
        return result

class Identify:
    """QGIS Plugin Implementation."""
    def __init__(self, iface):
        """Constructor.
        
        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInter"""
        # 
        self.iface = iface
        self.sb = self.iface.statusBarIface()
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)        
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'PysDOS_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        #здесь хранятся кнопочки
        self.actions = []
        self.menu = self.tr(u'&Identify')
        #подготовка полей под инструменты
        self.tool = None
        self.toolname = None
        #соединитель между потоком-приемником и главным потоком
        self.pysconnector = PysConnector(self.iface)  
        self.pysconnector.signal.connect(self.zoomer) 
        self.pysconnector.refresh.connect(self.refresher)
        self.pysconnector.drop.connect(self.dropSelection)
        #слои, где можно искать
        self.important_layers = [None,None]
        self.important_layers_valid= [False,False]
        self.important_layers_source = ['t_taxationisolated','t_forestquarter']
        self.important_layers_description = ['Таксация','Квартал']
        self.important_layers_prefix = ['t','q']
        self.important_layers_funcs = [self.callTaxation,self.callQuarter]
        #а это поток, который принимает
        self.listening_thread = PysThread(self.iface,self.pysconnector,self.important_layers,self.important_layers_prefix)
        self.listening_thread.start()
        #
        self.sender_is_active= False

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.
        We implement this ourselves since we do not inherit QObject.
        :param message: String for translation.
        :type message: str, QString
        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Identify', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.
        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str
        :param text: Text that should be shown in menu items for this action.
        :type text: str
        :param callback: Function to be called when the action is triggered.
        :type callback: function
        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool
        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool
        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool
        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str
        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget
        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.
        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        #готовим иконки
        edit_path = ':/plugins/Identify/edit.png'
        #
        self.add_action(
            edit_path,
            text=self.tr(u'Выделить данные и отправить информацию'),
            callback=self.selector,
            parent=self.iface.mainWindow(),
            enabled_flag=True)
        self.actions[0].setCheckable(True)

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Identify'),
                action)
            self.iface.removeToolBarIcon(action)
        self.listening_thread.stopWork()
        self.listening_thread.join()

    def refresher(self):
        self.getLayersBySource()
        self.listening_thread.important_layers=self.important_layers 
        #
        self.listening_thread.refreshing= False

    def zoomer(self):
        if len(self.pysconnector.feature_id_list):
            self.iface.setActiveLayer(self.pysconnector.feature_layer)
            self.pysconnector.feature_layer.selectByIds(self.pysconnector.feature_id_list)
            self.iface.mapCanvas().zoomToFeatureIds(self.pysconnector.feature_layer,self.pysconnector.feature_id_list)

    def selector(self):
        if self.sender_is_active:
            self.tool.reset()
            self.toolPan = QgsMapToolPan(self.iface.mapCanvas())
            self.iface.mapCanvas().setMapTool(self.toolPan)
            #
            self.actions[0].setChecked(False)
            self.sender_is_active = False
            self.dropSelection()
        else:
            if self.tool:
                self.tool.reset()
            self.tool = PysSelector(self.iface,Qt.yellow)
            self.tool.select.connect(self.showMenu)
            self.iface.mapCanvas().setMapTool(self.tool)
            self.drawShape = 'polygon'
            self.toolname = 'Selector'
            #
            self.actions[0].setChecked(True)
            self.sender_is_active = True

    def sender(self,stringa):
        sock = socket.socket()
        try:
            sock.connect(('127.0.0.1', 11000))
            sock.sendall(bytes(stringa, encoding = 'ascii'))
        except:
            print('беды с подключением')
            print(traceback.format_exc())    
        sock.close()
        
    def getLayersBySource(self):
        layers = QgsProject.instance().mapLayers().values()
        for i in range(len(self.important_layers)):
            if self.important_layers_valid[i]:
                if sip.isdeleted(self.important_layers[i]):
                    self.important_layers[i]=None
                    self.important_layers_valid[i]=False
                    for l in layers:
                        if self.important_layers_source[i] in l.publicSource():
                            self.important_layers[i]=l
                            self.important_layers_valid[i]=True
            else:
                for l in layers:
                    if self.important_layers_source[i] in l.publicSource():
                        self.important_layers[i]=l
                        self.important_layers_valid[i]=True
    
    def showMenu(self):
        self.getLayersBySource()
        menu = QMenu('Слои',self.iface.mainWindow())
        for i in range(len(self.important_layers)):
            act = QAction(self.important_layers_description[i],menu)
            act.setEnabled(self.important_layers[i]!=None)
            act.triggered.connect(self.important_layers_funcs[i])
            menu.addAction(act)
        menu.exec(self.tool.click_pos)

    def dropSelection(self):
        for i in range(len(self.important_layers)):
            if self.important_layers_valid[i]:
                self.important_layers[i].removeSelection()

    def callTaxation(self):
        self.selectAgain(0)
        return None

    def callQuarter(self):
        self.selectAgain(1)
        return None

    def selectAgain(self,layer_id):
        rbSelect = self.tool.rbSelect
        self.dropSelection()
        #
        layer = self.important_layers[layer_id]
        self.iface.setActiveLayer(layer)
        if layer is not None and layer.type() == QgsMapLayer.VectorLayer:
            g = self.geomTransform(
                rbSelect.asGeometry(),
                self.iface.mapCanvas().mapSettings().destinationCrs(),
                layer.crs())
            #
            features = layer.getFeatures(QgsFeatureRequest(g.boundingBox()))
            for feature in features:
                geom = feature.geometry()
                if g.intersects(geom):
                    layer.removeSelection()
                    layer.select(feature.id())
                    self.tool.reset()
                    self.sender(self.important_layers_prefix[layer_id]+feature.attributes()[0])
                    break

    def geomTransform(self, geom, crs_orig, crs_dest):
        g = QgsGeometry(geom)
        crsTransform = QgsCoordinateTransform(
            crs_orig, crs_dest, QgsCoordinateTransformContext())
        g.transform(crsTransform)
        return g